{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Downloads\\\\Paynet Case Study\\\\frontend\\\\src\\\\components\\\\charts\\\\FinancialInclusionChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\nimport Papa from \"papaparse\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst AccountOwnershipChart = () => {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    console.log(\"Fetching CSV data...\");\n    fetch(\"/Cleaned_WDIEXCEL.csv\").then(response => response.text()).then(csvData => {\n      console.log(\"CSV Raw Data:\", csvData); // Check if CSV is loaded\n      Papa.parse(csvData, {\n        header: true,\n        dynamicTyping: true,\n        complete: result => {\n          console.log(\"Parsed CSV result:\", result.data); // Log parsed data\n\n          const filteredData = result.data.filter(row => row[\"Short Indicator\"]);\n          const transformedData = {};\n          filteredData.forEach(row => {\n            const yearColumns = Object.keys(row).filter(key => !isNaN(key)); // Extract year columns\n            const indicator = row[\"Short Indicator\"];\n            if (!transformedData[indicator]) {\n              transformedData[indicator] = {};\n            }\n            yearColumns.forEach(year => {\n              transformedData[indicator][year] = row[year];\n            });\n          });\n          console.log(\"Transformed Data:\", transformedData);\n          const years = Object.keys(transformedData[Object.keys(transformedData)[0]]);\n          const datasets = Object.keys(transformedData).map(indicator => ({\n            label: indicator,\n            data: years.map(year => transformedData[indicator][year] || null),\n            borderColor: getRandomColor(),\n            fill: false\n          }));\n          setChartData({\n            labels: years,\n            datasets\n          });\n        },\n        error: parseError => {\n          console.error(\"Error parsing CSV:\", parseError);\n          setError(`Error parsing CSV: ${parseError.message}`);\n        }\n      });\n    }).catch(fetchError => {\n      console.error(\"Error fetching CSV:\", fetchError);\n      setError(`Error fetching CSV: ${fetchError.message}`);\n    });\n  }, []);\n  const getRandomColor = () => {\n    return `hsl(${Math.random() * 360}, 70%, 50%)`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Account Ownership by Demographic Group\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }, this), chartData ? /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 20\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 48\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(AccountOwnershipChart, \"IFJj7nSJvcbvx2I/MLqJX73o+2w=\");\n_c = AccountOwnershipChart;\nexport default AccountOwnershipChart;\nvar _c;\n$RefreshReg$(_c, \"AccountOwnershipChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Papa","jsxDEV","_jsxDEV","register","AccountOwnershipChart","_s","chartData","setChartData","error","setError","console","log","fetch","then","response","text","csvData","parse","header","dynamicTyping","complete","result","data","filteredData","filter","row","transformedData","forEach","yearColumns","Object","keys","key","isNaN","indicator","year","years","datasets","map","label","borderColor","getRandomColor","fill","labels","parseError","message","catch","fetchError","Math","random","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","_c","$RefreshReg$"],"sources":["C:/Users/user/Downloads/Paynet Case Study/frontend/src/components/charts/FinancialInclusionChart.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\r\nimport Papa from \"papaparse\";\r\n\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nconst AccountOwnershipChart = () => {\r\n  const [chartData, setChartData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    console.log(\"Fetching CSV data...\");\r\n\r\n    fetch(\"/Cleaned_WDIEXCEL.csv\")\r\n      .then((response) => response.text())\r\n      .then((csvData) => {\r\n        console.log(\"CSV Raw Data:\", csvData); // Check if CSV is loaded\r\n        Papa.parse(csvData, {\r\n          header: true,\r\n          dynamicTyping: true,\r\n          complete: (result) => {\r\n            console.log(\"Parsed CSV result:\", result.data); // Log parsed data\r\n\r\n            const filteredData = result.data.filter((row) => row[\"Short Indicator\"]);\r\n            const transformedData = {};\r\n\r\n            filteredData.forEach((row) => {\r\n              const yearColumns = Object.keys(row).filter((key) => !isNaN(key)); // Extract year columns\r\n              const indicator = row[\"Short Indicator\"];\r\n\r\n              if (!transformedData[indicator]) {\r\n                transformedData[indicator] = {};\r\n              }\r\n\r\n              yearColumns.forEach((year) => {\r\n                transformedData[indicator][year] = row[year];\r\n              });\r\n            });\r\n\r\n            console.log(\"Transformed Data:\", transformedData);\r\n\r\n            const years = Object.keys(transformedData[Object.keys(transformedData)[0]]);\r\n            const datasets = Object.keys(transformedData).map((indicator) => ({\r\n              label: indicator,\r\n              data: years.map((year) => transformedData[indicator][year] || null),\r\n              borderColor: getRandomColor(),\r\n              fill: false,\r\n            }));\r\n\r\n            setChartData({\r\n              labels: years,\r\n              datasets,\r\n            });\r\n          },\r\n          error: (parseError) => {\r\n            console.error(\"Error parsing CSV:\", parseError);\r\n            setError(`Error parsing CSV: ${parseError.message}`);\r\n          },\r\n        });\r\n      })\r\n      .catch((fetchError) => {\r\n        console.error(\"Error fetching CSV:\", fetchError);\r\n        setError(`Error fetching CSV: ${fetchError.message}`);\r\n      });\r\n  }, []);\r\n\r\n  const getRandomColor = () => {\r\n    return `hsl(${Math.random() * 360}, 70%, 50%)`;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Account Ownership by Demographic Group</h2>\r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n      {chartData ? <Line data={chartData} /> : <p>Loading...</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountOwnershipChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}