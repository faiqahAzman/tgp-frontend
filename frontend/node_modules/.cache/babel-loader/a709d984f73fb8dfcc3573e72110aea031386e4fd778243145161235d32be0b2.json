{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Downloads\\\\Paynet Case Study\\\\frontend\\\\src\\\\components\\\\charts\\\\FinancialInclusionChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\nimport Papa from \"papaparse\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst AccountOwnershipChart = () => {\n  _s();\n  const [chartData, setChartData] = useState({});\n  const [error, setError] = useState(null);\n  const [countries, setCountries] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(\"Malaysia\");\n  const [fullData, setFullData] = useState([]);\n  const processChartData = useCallback((data, country) => {\n    if (!data || data.length === 0) {\n      setError(`No data available for ${country}`);\n      setChartData({});\n      return;\n    }\n    const countryData = data.filter(row => row.Country === country);\n    if (countryData.length === 0) {\n      setError(`No data found for ${country}`);\n      setChartData({});\n      return;\n    }\n    setError(null);\n    const charts = {};\n    const indicators = [...new Set(countryData.map(row => row[\"Short Indicator\"]))];\n    indicators.forEach(indicator => {\n      const groupData = countryData.filter(row => row[\"Short Indicator\"] === indicator);\n      if (groupData.length === 0) return;\n      const transformedData = {};\n      groupData.forEach(row => {\n        Object.keys(row).forEach(key => {\n          if (!isNaN(key)) {\n            transformedData[key] = row[key];\n          }\n        });\n      });\n      const years = Object.keys(transformedData);\n      charts[indicator] = {\n        labels: years,\n        datasets: [{\n          label: indicator,\n          data: years.map(year => transformedData[year] || null),\n          borderColor: getRandomColor(),\n          fill: false\n        }]\n      };\n    });\n    setChartData(charts);\n  }, []);\n  useEffect(() => {\n    fetch(\"/Cleaned_WDIEXCEL.csv\").then(response => response.text()).then(csvData => {\n      Papa.parse(csvData, {\n        header: true,\n        dynamicTyping: true,\n        complete: result => {\n          const data = result.data;\n          setFullData(data);\n          const uniqueCountries = [...new Set(data.map(row => row.Country))].filter(Boolean);\n          setCountries(uniqueCountries);\n          const defaultCountry = uniqueCountries.includes(\"Malaysia\") ? \"Malaysia\" : uniqueCountries[0] || \"\";\n          setSelectedCountry(defaultCountry);\n          if (defaultCountry) {\n            processChartData(data, defaultCountry);\n          }\n        },\n        error: parseError => {\n          console.error(\"Error parsing CSV:\", parseError);\n          setError(`Error parsing CSV: ${parseError.message}`);\n        }\n      });\n    }).catch(fetchError => {\n      console.error(\"Error fetching CSV:\", fetchError);\n      setError(`Error fetching CSV: ${fetchError.message}`);\n    });\n  }, [processChartData]);\n  const getRandomColor = () => {\n    return `hsl(${Math.random() * 360}, 70%, 50%)`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Account Ownership by Demographic Group\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Select Country: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => {\n        const newCountry = e.target.value;\n        setSelectedCountry(newCountry);\n        processChartData(fullData, newCountry);\n      },\n      value: selectedCountry,\n      children: countries.map(country => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: country,\n        children: country\n      }, country, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"blue\",\n        fontWeight: \"bold\",\n        marginTop: \"10px\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this) : Object.keys(chartData).map(group => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: group\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData[group]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }, this)]\n    }, group, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(AccountOwnershipChart, \"+3hDwvCmQyxaTDLCdNu58SPCYkQ=\");\n_c = AccountOwnershipChart;\nexport default AccountOwnershipChart;\nvar _c;\n$RefreshReg$(_c, \"AccountOwnershipChart\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Papa","jsxDEV","_jsxDEV","register","AccountOwnershipChart","_s","chartData","setChartData","error","setError","countries","setCountries","selectedCountry","setSelectedCountry","fullData","setFullData","processChartData","data","country","length","countryData","filter","row","Country","charts","indicators","Set","map","forEach","indicator","groupData","transformedData","Object","keys","key","isNaN","years","labels","datasets","label","year","borderColor","getRandomColor","fill","fetch","then","response","text","csvData","parse","header","dynamicTyping","complete","result","uniqueCountries","Boolean","defaultCountry","includes","parseError","console","message","catch","fetchError","Math","random","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","onChange","e","newCountry","target","value","fontWeight","marginTop","group","marginBottom","_c","$RefreshReg$"],"sources":["C:/Users/user/Downloads/Paynet Case Study/frontend/src/components/charts/FinancialInclusionChart.jsx"],"sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\r\nimport Papa from \"papaparse\";\r\n\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nconst AccountOwnershipChart = () => {\r\n  const [chartData, setChartData] = useState({});\r\n  const [error, setError] = useState(null);\r\n  const [countries, setCountries] = useState([]);\r\n  const [selectedCountry, setSelectedCountry] = useState(\"Malaysia\");\r\n  const [fullData, setFullData] = useState([]);\r\n\r\n  const processChartData = useCallback((data, country) => {\r\n    if (!data || data.length === 0) {\r\n      setError(`No data available for ${country}`);\r\n      setChartData({});\r\n      return;\r\n    }\r\n\r\n    const countryData = data.filter((row) => row.Country === country);\r\n\r\n    if (countryData.length === 0) {\r\n      setError(`No data found for ${country}`);\r\n      setChartData({});\r\n      return;\r\n    }\r\n\r\n    setError(null);\r\n    const charts = {};\r\n    const indicators = [...new Set(countryData.map((row) => row[\"Short Indicator\"]))];\r\n\r\n    indicators.forEach((indicator) => {\r\n      const groupData = countryData.filter((row) => row[\"Short Indicator\"] === indicator);\r\n      if (groupData.length === 0) return;\r\n\r\n      const transformedData = {};\r\n      groupData.forEach((row) => {\r\n        Object.keys(row).forEach((key) => {\r\n          if (!isNaN(key)) {\r\n            transformedData[key] = row[key];\r\n          }\r\n        });\r\n      });\r\n\r\n      const years = Object.keys(transformedData);\r\n      charts[indicator] = {\r\n        labels: years,\r\n        datasets: [\r\n          {\r\n            label: indicator,\r\n            data: years.map((year) => transformedData[year] || null),\r\n            borderColor: getRandomColor(),\r\n            fill: false,\r\n          },\r\n        ],\r\n      };\r\n    });\r\n\r\n    setChartData(charts);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/Cleaned_WDIEXCEL.csv\")\r\n      .then((response) => response.text())\r\n      .then((csvData) => {\r\n        Papa.parse(csvData, {\r\n          header: true,\r\n          dynamicTyping: true,\r\n          complete: (result) => {\r\n            const data = result.data;\r\n            setFullData(data);\r\n\r\n            const uniqueCountries = [...new Set(data.map((row) => row.Country))].filter(Boolean);\r\n            setCountries(uniqueCountries);\r\n\r\n            const defaultCountry = uniqueCountries.includes(\"Malaysia\") ? \"Malaysia\" : uniqueCountries[0] || \"\";\r\n            setSelectedCountry(defaultCountry);\r\n\r\n            if (defaultCountry) {\r\n              processChartData(data, defaultCountry);\r\n            }\r\n          },\r\n          error: (parseError) => {\r\n            console.error(\"Error parsing CSV:\", parseError);\r\n            setError(`Error parsing CSV: ${parseError.message}`);\r\n          },\r\n        });\r\n      })\r\n      .catch((fetchError) => {\r\n        console.error(\"Error fetching CSV:\", fetchError);\r\n        setError(`Error fetching CSV: ${fetchError.message}`);\r\n      });\r\n  }, [processChartData]);\r\n\r\n  const getRandomColor = () => {\r\n    return `hsl(${Math.random() * 360}, 70%, 50%)`;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Account Ownership by Demographic Group</h2>\r\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n\r\n      <label>Select Country: </label>\r\n      <select\r\n        onChange={(e) => {\r\n          const newCountry = e.target.value;\r\n          setSelectedCountry(newCountry);\r\n          processChartData(fullData, newCountry);\r\n        }}\r\n        value={selectedCountry}\r\n      >\r\n        {countries.map((country) => (\r\n          <option key={country} value={country}>\r\n            {country}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      {error ? (\r\n        <p style={{ color: \"blue\", fontWeight: \"bold\", marginTop: \"10px\" }}>{error}</p>\r\n      ) : (\r\n        Object.keys(chartData).map((group) => (\r\n          <div key={group} style={{ marginBottom: \"20px\" }}>\r\n            <h3>{group}</h3>\r\n            <Line data={chartData[group]} />\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountOwnershipChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}