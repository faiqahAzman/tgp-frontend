{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Downloads\\\\Paynet Case Study\\\\frontend\\\\src\\\\components\\\\charts\\\\FinancialInclusionChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\nimport Papa from \"papaparse\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst AccountOwnershipChart = () => {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [error, setError] = useState(null);\n  const [countries, setCountries] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(\"\");\n  useEffect(() => {\n    fetch(\"/Cleaned_WDIEXCEL.csv\").then(response => response.text()).then(csvData => {\n      Papa.parse(csvData, {\n        header: true,\n        dynamicTyping: true,\n        complete: result => {\n          const data = result.data;\n\n          // Extract unique country names for dropdown\n          const uniqueCountries = [...new Set(data.map(row => row.Country))].filter(Boolean);\n          setCountries(uniqueCountries);\n          setSelectedCountry(uniqueCountries[0]); // Default to first country\n\n          processChartData(data, uniqueCountries[0]); // Load initial data for first country\n        },\n        error: parseError => {\n          console.error(\"Error parsing CSV:\", parseError);\n          setError(`Error parsing CSV: ${parseError.message}`);\n        }\n      });\n    }).catch(fetchError => {\n      console.error(\"Error fetching CSV:\", fetchError);\n      setError(`Error fetching CSV: ${fetchError.message}`);\n    });\n  }, []);\n  const processChartData = (data, country) => {\n    const countryData = data.filter(row => row.Country === country && row[\"Short Indicator\"]);\n    const transformedData = {};\n    countryData.forEach(row => {\n      const indicator = row[\"Short Indicator\"];\n      Object.keys(row).forEach(key => {\n        if (!isNaN(key)) {\n          // If column is a year\n          if (!transformedData[indicator]) {\n            transformedData[indicator] = {};\n          }\n          transformedData[indicator][key] = row[key];\n        }\n      });\n    });\n    const years = Object.keys(transformedData[Object.keys(transformedData)[0]]);\n    const datasets = Object.keys(transformedData).map(indicator => ({\n      label: indicator,\n      data: years.map(year => transformedData[indicator][year] || null),\n      borderColor: getRandomColor(),\n      fill: false\n    }));\n    setChartData({\n      labels: years,\n      datasets\n    });\n  };\n  const getRandomColor = () => {\n    return `hsl(${Math.random() * 360}, 70%, 50%)`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Account Ownership by Demographic Group\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Select Country: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => {\n        setSelectedCountry(e.target.value);\n        processChartData(chartData, e.target.value);\n      },\n      children: countries.map(country => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: country,\n        children: country\n      }, country, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), chartData ? /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 20\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 48\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(AccountOwnershipChart, \"1lvchCf9qK62R8fIf+zWSY4jeJk=\");\n_c = AccountOwnershipChart;\nexport default AccountOwnershipChart;\nvar _c;\n$RefreshReg$(_c, \"AccountOwnershipChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Papa","jsxDEV","_jsxDEV","register","AccountOwnershipChart","_s","chartData","setChartData","error","setError","countries","setCountries","selectedCountry","setSelectedCountry","fetch","then","response","text","csvData","parse","header","dynamicTyping","complete","result","data","uniqueCountries","Set","map","row","Country","filter","Boolean","processChartData","parseError","console","message","catch","fetchError","country","countryData","transformedData","forEach","indicator","Object","keys","key","isNaN","years","datasets","label","year","borderColor","getRandomColor","fill","labels","Math","random","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","onChange","e","target","value","_c","$RefreshReg$"],"sources":["C:/Users/user/Downloads/Paynet Case Study/frontend/src/components/charts/FinancialInclusionChart.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\r\nimport Papa from \"papaparse\";\r\n\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nconst AccountOwnershipChart = () => {\r\n  const [chartData, setChartData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [countries, setCountries] = useState([]);\r\n  const [selectedCountry, setSelectedCountry] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    fetch(\"/Cleaned_WDIEXCEL.csv\")\r\n      .then((response) => response.text())\r\n      .then((csvData) => {\r\n        Papa.parse(csvData, {\r\n          header: true,\r\n          dynamicTyping: true,\r\n          complete: (result) => {\r\n            const data = result.data;\r\n            \r\n            // Extract unique country names for dropdown\r\n            const uniqueCountries = [...new Set(data.map((row) => row.Country))].filter(Boolean);\r\n            setCountries(uniqueCountries);\r\n            setSelectedCountry(uniqueCountries[0]); // Default to first country\r\n            \r\n            processChartData(data, uniqueCountries[0]); // Load initial data for first country\r\n          },\r\n          error: (parseError) => {\r\n            console.error(\"Error parsing CSV:\", parseError);\r\n            setError(`Error parsing CSV: ${parseError.message}`);\r\n          },\r\n        });\r\n      })\r\n      .catch((fetchError) => {\r\n        console.error(\"Error fetching CSV:\", fetchError);\r\n        setError(`Error fetching CSV: ${fetchError.message}`);\r\n      });\r\n  }, []);\r\n\r\n  const processChartData = (data, country) => {\r\n    const countryData = data.filter((row) => row.Country === country && row[\"Short Indicator\"]);\r\n\r\n    const transformedData = {};\r\n    countryData.forEach((row) => {\r\n      const indicator = row[\"Short Indicator\"];\r\n      Object.keys(row).forEach((key) => {\r\n        if (!isNaN(key)) { // If column is a year\r\n          if (!transformedData[indicator]) {\r\n            transformedData[indicator] = {};\r\n          }\r\n          transformedData[indicator][key] = row[key];\r\n        }\r\n      });\r\n    });\r\n\r\n    const years = Object.keys(transformedData[Object.keys(transformedData)[0]]);\r\n    const datasets = Object.keys(transformedData).map((indicator) => ({\r\n      label: indicator,\r\n      data: years.map((year) => transformedData[indicator][year] || null),\r\n      borderColor: getRandomColor(),\r\n      fill: false,\r\n    }));\r\n\r\n    setChartData({\r\n      labels: years,\r\n      datasets,\r\n    });\r\n  };\r\n\r\n  const getRandomColor = () => {\r\n    return `hsl(${Math.random() * 360}, 70%, 50%)`;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Account Ownership by Demographic Group</h2>\r\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n\r\n      <label>Select Country: </label>\r\n      <select onChange={(e) => { setSelectedCountry(e.target.value); processChartData(chartData, e.target.value); }}>\r\n        {countries.map((country) => (\r\n          <option key={country} value={country}>{country}</option>\r\n        ))}\r\n      </select>\r\n\r\n      {chartData ? <Line data={chartData} /> : <p>Loading...</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountOwnershipChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}