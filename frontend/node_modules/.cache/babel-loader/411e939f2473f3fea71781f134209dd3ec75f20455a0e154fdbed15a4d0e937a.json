{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Downloads\\\\Paynet Case Study\\\\frontend\\\\src\\\\components\\\\charts\\\\DigitalPaymentChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, LineElement, PointElement, LinearScale, Title, Tooltip, Legend } from \"chart.js\";\nimport Papa from \"papaparse\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(LineElement, PointElement, LinearScale, Title, Tooltip, Legend);\nconst DigitalPaymentsChart = () => {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [error, setError] = useState(null);\n  const [countries, setCountries] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(\"Malaysia\");\n  const [fullData, setFullData] = useState([]);\n  const processChartData = useCallback((data, country) => {\n    if (!data || data.length === 0) {\n      setError(`No data available for ${country}`);\n      setChartData(null);\n      return;\n    }\n    const countryData = data.find(row => row.Country === country);\n    if (!countryData) {\n      setError(`No data found for ${country}`);\n      setChartData(null);\n      return;\n    }\n    setError(null);\n    const years = [\"2011\", \"2014\", \"2017\", \"2021\", \"2022\"];\n    const values = years.map(year => countryData[year] || 0);\n    setChartData({\n      labels: years,\n      datasets: [{\n        label: \"Made or Received A Digital Payment\",\n        data: values,\n        borderColor: \"#36A2EB\",\n        backgroundColor: \"rgba(54, 162, 235, 0.2)\",\n        fill: true\n      }]\n    });\n  }, []);\n  useEffect(() => {\n    fetch(\"/Cleaned_FINDEX.csv\").then(response => response.text()).then(csvData => {\n      Papa.parse(csvData, {\n        header: true,\n        dynamicTyping: true,\n        complete: result => {\n          const data = result.data.filter(row => row[\"Short Indicator\"] === \"made or received\");\n          setFullData(data);\n          const uniqueCountries = [...new Set(data.map(row => row.Country))].filter(Boolean);\n          setCountries(uniqueCountries);\n          processChartData(data, selectedCountry);\n        },\n        error: parseError => {\n          setError(`Error parsing CSV: ${parseError.message}`);\n        }\n      });\n    }).catch(fetchError => {\n      setError(`Error fetching CSV: ${fetchError.message}`);\n    });\n  }, [processChartData, selectedCountry]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-lg mx-auto p-4 bg-white shadow-lg rounded-xl border border-gray-200\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold text-gray-800 mb-4 text-center\",\n      children: \"\\uD83D\\uDCC8 Digital Payments (% 15+)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500 font-medium text-center\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"font-medium text-md mr-2\",\n        children: \"Select Country:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"border rounded-lg px-3 py-1 bg-gray-50 focus:ring-2 focus:ring-blue-300\",\n        onChange: e => setSelectedCountry(e.target.value),\n        value: selectedCountry,\n        children: countries.map(country => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: country,\n          children: country\n        }, country, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), chartData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-2 bg-gray-50 rounded-lg shadow-inner\",\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: {\n          responsive: true,\n          maintainAspectRatio: false\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-gray-500 text-center mt-4\",\n      children: \"\\uD83D\\uDCE1 Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(DigitalPaymentsChart, \"m3ywBf0l3dP19ZQpku7mvhXQw4c=\");\n_c = DigitalPaymentsChart;\nexport default DigitalPaymentsChart;\nvar _c;\n$RefreshReg$(_c, \"DigitalPaymentsChart\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","Line","Chart","ChartJS","LineElement","PointElement","LinearScale","Title","Tooltip","Legend","Papa","jsxDEV","_jsxDEV","register","DigitalPaymentsChart","_s","chartData","setChartData","error","setError","countries","setCountries","selectedCountry","setSelectedCountry","fullData","setFullData","processChartData","data","country","length","countryData","find","row","Country","years","values","map","year","labels","datasets","label","borderColor","backgroundColor","fill","fetch","then","response","text","csvData","parse","header","dynamicTyping","complete","result","filter","uniqueCountries","Set","Boolean","parseError","message","catch","fetchError","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","value","options","responsive","maintainAspectRatio","_c","$RefreshReg$"],"sources":["C:/Users/user/Downloads/Paynet Case Study/frontend/src/components/charts/DigitalPaymentChart.jsx"],"sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { Chart as ChartJS, LineElement, PointElement, LinearScale, Title, Tooltip, Legend } from \"chart.js\";\r\nimport Papa from \"papaparse\";\r\n\r\nChartJS.register(LineElement, PointElement, LinearScale, Title, Tooltip, Legend);\r\n\r\nconst DigitalPaymentsChart = () => {\r\n  const [chartData, setChartData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [countries, setCountries] = useState([]);\r\n  const [selectedCountry, setSelectedCountry] = useState(\"Malaysia\");\r\n  const [fullData, setFullData] = useState([]);\r\n\r\n  const processChartData = useCallback((data, country) => {\r\n    if (!data || data.length === 0) {\r\n      setError(`No data available for ${country}`);\r\n      setChartData(null);\r\n      return;\r\n    }\r\n\r\n    const countryData = data.find(row => row.Country === country);\r\n    if (!countryData) {\r\n      setError(`No data found for ${country}`);\r\n      setChartData(null);\r\n      return;\r\n    }\r\n\r\n    setError(null);\r\n    \r\n    const years = [\"2011\", \"2014\", \"2017\", \"2021\", \"2022\"];\r\n    const values = years.map(year => countryData[year] || 0);\r\n\r\n    setChartData({\r\n      labels: years,\r\n      datasets: [\r\n        {\r\n          label: \"Made or Received A Digital Payment\",\r\n          data: values,\r\n          borderColor: \"#36A2EB\",\r\n          backgroundColor: \"rgba(54, 162, 235, 0.2)\",\r\n          fill: true,\r\n        }\r\n      ]\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/Cleaned_FINDEX.csv\")\r\n      .then(response => response.text())\r\n      .then(csvData => {\r\n        Papa.parse(csvData, {\r\n          header: true,\r\n          dynamicTyping: true,\r\n          complete: (result) => {\r\n            const data = result.data.filter(row => row[\"Short Indicator\"] === \"made or received\");\r\n            setFullData(data);\r\n            \r\n            const uniqueCountries = [...new Set(data.map(row => row.Country))].filter(Boolean);\r\n            setCountries(uniqueCountries);\r\n            \r\n            processChartData(data, selectedCountry);\r\n          },\r\n          error: (parseError) => {\r\n            setError(`Error parsing CSV: ${parseError.message}`);\r\n          }\r\n        });\r\n      })\r\n      .catch(fetchError => {\r\n        setError(`Error fetching CSV: ${fetchError.message}`);\r\n      });\r\n  }, [processChartData, selectedCountry]);\r\n\r\n  return (\r\n    <div className=\"max-w-lg mx-auto p-4 bg-white shadow-lg rounded-xl border border-gray-200\">\r\n      <h2 className=\"text-xl font-bold text-gray-800 mb-4 text-center\">ðŸ“ˆ Digital Payments (% 15+)</h2>\r\n      \r\n      {error && <p className=\"text-red-500 font-medium text-center\">{error}</p>}\r\n      \r\n      <div className=\"flex justify-center mb-4\">\r\n        <label className=\"font-medium text-md mr-2\">Select Country:</label>\r\n        <select\r\n          className=\"border rounded-lg px-3 py-1 bg-gray-50 focus:ring-2 focus:ring-blue-300\"\r\n          onChange={(e) => setSelectedCountry(e.target.value)}\r\n          value={selectedCountry}\r\n        >\r\n          {countries.map((country) => (\r\n            <option key={country} value={country}>{country}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      \r\n      {chartData ? (\r\n        <div className=\"p-2 bg-gray-50 rounded-lg shadow-inner\">\r\n          <Line data={chartData} options={{ responsive: true, maintainAspectRatio: false }} />\r\n        </div>\r\n      ) : (\r\n        <p className=\"text-gray-500 text-center mt-4\">ðŸ“¡ Loading data...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DigitalPaymentsChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}