{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Downloads\\\\Paynet Case Study\\\\frontend\\\\src\\\\components\\\\charts\\\\GDPGrowthChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { Pie } from \"react-chartjs-2\";\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from \"chart.js\";\nimport Papa from \"papaparse\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(ArcElement, Tooltip, Legend);\nconst EconomicIndicatorsPieChart = () => {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [error, setError] = useState(null);\n  const [countries, setCountries] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(\"Malaysia\");\n  const [fullData, setFullData] = useState([]);\n  const processChartData = useCallback((data, country) => {\n    if (!data || data.length === 0) {\n      setError(`No data available for ${country}`);\n      setChartData(null);\n      return;\n    }\n    const indicators = [\"Central government debt, Total (% of GDP)\", \"Revenue, excluding grants (% of GDP)\", \"Trade (% of GDP)\", \"Trade in services (% of GDP)\"];\n    const countryData = data.filter(row => row.Country === country && indicators.includes(row[\"Short Indicator\"]));\n    if (countryData.length === 0) {\n      setError(`No data found for ${country}`);\n      setChartData(null);\n      return;\n    }\n    setError(null);\n    const labels = countryData.map(row => row[\"Short Indicator\"]);\n    const values = countryData.map(row => row[\"2022\"] || 0); // Change 2022 to latest year available\n\n    setChartData({\n      labels,\n      datasets: [{\n        label: \"% of GDP\",\n        data: values,\n        backgroundColor: [\"#FF6384\", \"#36A2EB\", \"#FFCE56\", \"#4CAF50\"],\n        hoverBackgroundColor: [\"#FF4364\", \"#2582CB\", \"#FFC046\", \"#2E7D32\"]\n      }]\n    });\n  }, []);\n  useEffect(() => {\n    fetch(\"/Cleaned_WDIEXCEL(1).csv\").then(response => response.text()).then(csvData => {\n      Papa.parse(csvData, {\n        header: true,\n        dynamicTyping: true,\n        complete: result => {\n          const data = result.data;\n          setFullData(data);\n          const uniqueCountries = [...new Set(data.map(row => row.Country))].filter(Boolean);\n          setCountries(uniqueCountries);\n          processChartData(data, selectedCountry);\n        },\n        error: parseError => {\n          setError(`Error parsing CSV: ${parseError.message}`);\n        }\n      });\n    }).catch(fetchError => {\n      setError(`Error fetching CSV: ${fetchError.message}`);\n    });\n  }, [processChartData, selectedCountry]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-3xl mx-auto p-6 bg-white shadow-lg rounded-xl border border-gray-200\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold text-gray-800 mb-6 text-center\",\n      children: \"\\uD83D\\uDCCA Economic Indicators (% of GDP)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500 font-medium text-center\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"font-medium text-lg mr-2\",\n        children: \"Select Country:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"border rounded-lg px-4 py-2 bg-gray-50 focus:ring-2 focus:ring-blue-300\",\n        onChange: e => setSelectedCountry(e.target.value),\n        value: selectedCountry,\n        children: countries.map(country => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: country,\n          children: country\n        }, country, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), chartData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4 bg-gray-50 rounded-lg shadow-inner\",\n      children: /*#__PURE__*/_jsxDEV(Pie, {\n        data: chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-gray-500 text-center mt-4\",\n      children: \"\\uD83D\\uDCE1 Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(EconomicIndicatorsPieChart, \"m3ywBf0l3dP19ZQpku7mvhXQw4c=\");\n_c = EconomicIndicatorsPieChart;\nexport default EconomicIndicatorsPieChart;\nvar _c;\n$RefreshReg$(_c, \"EconomicIndicatorsPieChart\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","Pie","Chart","ChartJS","ArcElement","Tooltip","Legend","Papa","jsxDEV","_jsxDEV","register","EconomicIndicatorsPieChart","_s","chartData","setChartData","error","setError","countries","setCountries","selectedCountry","setSelectedCountry","fullData","setFullData","processChartData","data","country","length","indicators","countryData","filter","row","Country","includes","labels","map","values","datasets","label","backgroundColor","hoverBackgroundColor","fetch","then","response","text","csvData","parse","header","dynamicTyping","complete","result","uniqueCountries","Set","Boolean","parseError","message","catch","fetchError","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","value","_c","$RefreshReg$"],"sources":["C:/Users/user/Downloads/Paynet Case Study/frontend/src/components/charts/GDPGrowthChart.jsx"],"sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\r\nimport { Pie } from \"react-chartjs-2\";\r\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from \"chart.js\";\r\nimport Papa from \"papaparse\";\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\nconst EconomicIndicatorsPieChart = () => {\r\n  const [chartData, setChartData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [countries, setCountries] = useState([]);\r\n  const [selectedCountry, setSelectedCountry] = useState(\"Malaysia\");\r\n  const [fullData, setFullData] = useState([]);\r\n\r\n  const processChartData = useCallback((data, country) => {\r\n    if (!data || data.length === 0) {\r\n      setError(`No data available for ${country}`);\r\n      setChartData(null);\r\n      return;\r\n    }\r\n\r\n    const indicators = [\r\n      \"Central government debt, Total (% of GDP)\",\r\n      \"Revenue, excluding grants (% of GDP)\",\r\n      \"Trade (% of GDP)\",\r\n      \"Trade in services (% of GDP)\"\r\n    ];\r\n\r\n    const countryData = data.filter(row => row.Country === country && indicators.includes(row[\"Short Indicator\"]));\r\n    if (countryData.length === 0) {\r\n      setError(`No data found for ${country}`);\r\n      setChartData(null);\r\n      return;\r\n    }\r\n\r\n    setError(null);\r\n    \r\n    const labels = countryData.map(row => row[\"Short Indicator\"]);\r\n    const values = countryData.map(row => row[\"2022\"] || 0); // Change 2022 to latest year available\r\n    \r\n    setChartData({\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: \"% of GDP\",\r\n          data: values,\r\n          backgroundColor: [\"#FF6384\", \"#36A2EB\", \"#FFCE56\", \"#4CAF50\"],\r\n          hoverBackgroundColor: [\"#FF4364\", \"#2582CB\", \"#FFC046\", \"#2E7D32\"],\r\n        }\r\n      ]\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/Cleaned_WDIEXCEL(1).csv\")\r\n      .then(response => response.text())\r\n      .then(csvData => {\r\n        Papa.parse(csvData, {\r\n          header: true,\r\n          dynamicTyping: true,\r\n          complete: (result) => {\r\n            const data = result.data;\r\n            setFullData(data);\r\n            \r\n            const uniqueCountries = [...new Set(data.map(row => row.Country))].filter(Boolean);\r\n            setCountries(uniqueCountries);\r\n            \r\n            processChartData(data, selectedCountry);\r\n          },\r\n          error: (parseError) => {\r\n            setError(`Error parsing CSV: ${parseError.message}`);\r\n          }\r\n        });\r\n      })\r\n      .catch(fetchError => {\r\n        setError(`Error fetching CSV: ${fetchError.message}`);\r\n      });\r\n  }, [processChartData, selectedCountry]);\r\n\r\n  return (\r\n    <div className=\"max-w-3xl mx-auto p-6 bg-white shadow-lg rounded-xl border border-gray-200\">\r\n      <h2 className=\"text-2xl font-bold text-gray-800 mb-6 text-center\">ðŸ“Š Economic Indicators (% of GDP)</h2>\r\n      \r\n      {error && <p className=\"text-red-500 font-medium text-center\">{error}</p>}\r\n      \r\n      <div className=\"flex justify-center mb-6\">\r\n        <label className=\"font-medium text-lg mr-2\">Select Country:</label>\r\n        <select\r\n          className=\"border rounded-lg px-4 py-2 bg-gray-50 focus:ring-2 focus:ring-blue-300\"\r\n          onChange={(e) => setSelectedCountry(e.target.value)}\r\n          value={selectedCountry}\r\n        >\r\n          {countries.map((country) => (\r\n            <option key={country} value={country}>{country}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      \r\n      {chartData ? (\r\n        <div className=\"p-4 bg-gray-50 rounded-lg shadow-inner\">\r\n          <Pie data={chartData} />\r\n        </div>\r\n      ) : (\r\n        <p className=\"text-gray-500 text-center mt-4\">ðŸ“¡ Loading data...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EconomicIndicatorsPieChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}