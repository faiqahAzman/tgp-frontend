{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Downloads\\\\Paynet Case Study\\\\frontend\\\\src\\\\components\\\\charts\\\\FinancialInclusionChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\nimport Papa from \"papaparse\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst AccountOwnershipChart = () => {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [error, setError] = useState(null);\n  const [countries, setCountries] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(\"\");\n  const [fullData, setFullData] = useState([]);\n  const processChartData = useCallback((data, country) => {\n    if (!data || data.length === 0) return;\n    const countryData = data.filter(row => row.Country === country && row[\"Short Indicator\"]);\n    if (countryData.length === 0) {\n      setError(`No data available for ${country}`);\n      setChartData(null);\n      return;\n    }\n    setError(null);\n    const transformedData = {};\n    countryData.forEach(row => {\n      const indicator = row[\"Short Indicator\"];\n      Object.keys(row).forEach(key => {\n        if (!isNaN(key)) {\n          if (!transformedData[indicator]) {\n            transformedData[indicator] = {};\n          }\n          transformedData[indicator][key] = row[key];\n        }\n      });\n    });\n    const years = Object.keys(transformedData[Object.keys(transformedData)[0]] || {});\n    const datasets = Object.keys(transformedData).map(indicator => ({\n      label: indicator,\n      data: years.map(year => transformedData[indicator][year] || null),\n      borderColor: getRandomColor(),\n      fill: false\n    }));\n    setChartData({\n      labels: years,\n      datasets\n    });\n  }, []);\n  useEffect(() => {\n    fetch(\"/Cleaned_WDIEXCEL.csv\").then(response => response.text()).then(csvData => {\n      Papa.parse(csvData, {\n        header: true,\n        dynamicTyping: true,\n        complete: result => {\n          const data = result.data;\n          setFullData(data);\n          const uniqueCountries = [...new Set(data.map(row => row.Country))].filter(Boolean);\n          setCountries(uniqueCountries);\n          const defaultCountry = uniqueCountries.includes(\"Malaysia\") ? \"Malaysia\" : uniqueCountries[0] || \"\";\n          setSelectedCountry(defaultCountry);\n          if (defaultCountry) {\n            processChartData(data, defaultCountry);\n          }\n        },\n        error: parseError => {\n          console.error(\"Error parsing CSV:\", parseError);\n          setError(`Error parsing CSV: ${parseError.message}`);\n        }\n      });\n    }).catch(fetchError => {\n      console.error(\"Error fetching CSV:\", fetchError);\n      setError(`Error fetching CSV: ${fetchError.message}`);\n    });\n  }, [processChartData]);\n  const getRandomColor = () => {\n    return `hsl(${Math.random() * 360}, 70%, 50%)`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Account Ownership by Demographic Group\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Select Country: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => {\n        const newCountry = e.target.value;\n        setSelectedCountry(newCountry);\n        processChartData(fullData, newCountry);\n      },\n      value: selectedCountry,\n      children: countries.map(country => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: country,\n        children: country\n      }, country, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"blue\",\n        fontWeight: \"bold\"\n      },\n      children: [\"No data found for \", selectedCountry, \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 3\n    }, this) : chartData && chartData.datasets.length > 0 ? /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 3\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(AccountOwnershipChart, \"VlZp3oStNdKKPmzAGHGuMSgFPD0=\");\n_c = AccountOwnershipChart;\nexport default AccountOwnershipChart;\nvar _c;\n$RefreshReg$(_c, \"AccountOwnershipChart\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Papa","jsxDEV","_jsxDEV","register","AccountOwnershipChart","_s","chartData","setChartData","error","setError","countries","setCountries","selectedCountry","setSelectedCountry","fullData","setFullData","processChartData","data","country","length","countryData","filter","row","Country","transformedData","forEach","indicator","Object","keys","key","isNaN","years","datasets","map","label","year","borderColor","getRandomColor","fill","labels","fetch","then","response","text","csvData","parse","header","dynamicTyping","complete","result","uniqueCountries","Set","Boolean","defaultCountry","includes","parseError","console","message","catch","fetchError","Math","random","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","onChange","e","newCountry","target","value","fontWeight","_c","$RefreshReg$"],"sources":["C:/Users/user/Downloads/Paynet Case Study/frontend/src/components/charts/FinancialInclusionChart.jsx"],"sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\r\nimport Papa from \"papaparse\";\r\n\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nconst AccountOwnershipChart = () => {\r\n  const [chartData, setChartData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [countries, setCountries] = useState([]);\r\n  const [selectedCountry, setSelectedCountry] = useState(\"\");\r\n  const [fullData, setFullData] = useState([]);\r\n\r\n  const processChartData = useCallback((data, country) => {\r\n    if (!data || data.length === 0) return;\r\n\r\n    const countryData = data.filter((row) => row.Country === country && row[\"Short Indicator\"]);\r\n\r\n    if (countryData.length === 0) {\r\n      setError(`No data available for ${country}`);\r\n      setChartData(null);\r\n      return;\r\n    }\r\n\r\n    setError(null);\r\n\r\n    const transformedData = {};\r\n    countryData.forEach((row) => {\r\n      const indicator = row[\"Short Indicator\"];\r\n      Object.keys(row).forEach((key) => {\r\n        if (!isNaN(key)) { \r\n          if (!transformedData[indicator]) {\r\n            transformedData[indicator] = {};\r\n          }\r\n          transformedData[indicator][key] = row[key];\r\n        }\r\n      });\r\n    });\r\n\r\n    const years = Object.keys(transformedData[Object.keys(transformedData)[0]] || {});\r\n    const datasets = Object.keys(transformedData).map((indicator) => ({\r\n      label: indicator,\r\n      data: years.map((year) => transformedData[indicator][year] || null),\r\n      borderColor: getRandomColor(),\r\n      fill: false,\r\n    }));\r\n\r\n    setChartData({ labels: years, datasets });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/Cleaned_WDIEXCEL.csv\")\r\n      .then((response) => response.text())\r\n      .then((csvData) => {\r\n        Papa.parse(csvData, {\r\n          header: true,\r\n          dynamicTyping: true,\r\n          complete: (result) => {\r\n            const data = result.data;\r\n            setFullData(data);\r\n\r\n            const uniqueCountries = [...new Set(data.map((row) => row.Country))].filter(Boolean);\r\n            setCountries(uniqueCountries);\r\n\r\n            const defaultCountry = uniqueCountries.includes(\"Malaysia\") ? \"Malaysia\" : uniqueCountries[0] || \"\";\r\n            setSelectedCountry(defaultCountry);\r\n\r\n            if (defaultCountry) {\r\n              processChartData(data, defaultCountry);\r\n            }\r\n          },\r\n          error: (parseError) => {\r\n            console.error(\"Error parsing CSV:\", parseError);\r\n            setError(`Error parsing CSV: ${parseError.message}`);\r\n          },\r\n        });\r\n      })\r\n      .catch((fetchError) => {\r\n        console.error(\"Error fetching CSV:\", fetchError);\r\n        setError(`Error fetching CSV: ${fetchError.message}`);\r\n      });\r\n  }, [processChartData]);\r\n\r\n  const getRandomColor = () => {\r\n    return `hsl(${Math.random() * 360}, 70%, 50%)`;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Account Ownership by Demographic Group</h2>\r\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n\r\n      <label>Select Country: </label>\r\n      <select onChange={(e) => { \r\n        const newCountry = e.target.value;\r\n        setSelectedCountry(newCountry); \r\n        processChartData(fullData, newCountry);\r\n      }} value={selectedCountry}>\r\n        {countries.map((country) => (\r\n          <option key={country} value={country}>{country}</option>\r\n        ))}\r\n      </select>\r\n\r\n      {error ? (\r\n  <p style={{ color: \"blue\", fontWeight: \"bold\" }}>No data found for {selectedCountry}.</p>\r\n) : chartData && chartData.datasets.length > 0 ? (\r\n  <Line data={chartData} />\r\n) : (\r\n  <p>Loading...</p>\r\n)}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountOwnershipChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}