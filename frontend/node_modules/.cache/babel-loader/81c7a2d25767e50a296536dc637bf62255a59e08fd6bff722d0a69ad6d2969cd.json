{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Downloads\\\\Paynet Case Study\\\\frontend\\\\src\\\\components\\\\charts\\\\UnemploymentChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer } from \"recharts\";\nimport Select from \"react-select\";\nimport Papa from \"papaparse\"; // Install with: npm install papaparse\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UEChart = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(\"Malaysia\");\n  useEffect(() => {\n    // Fetch the CSV file\n    fetch(\"/Cleaned_WDIEXCEL(1).csv\") // Adjust path as needed\n    .then(response => response.text()).then(csvText => {\n      // Parse CSV data\n      Papa.parse(csvText, {\n        header: true,\n        skipEmptyLines: true,\n        complete: result => {\n          setData(result.data);\n        }\n      });\n    }).catch(error => console.error(\"Error fetching CSV:\", error));\n  }, []);\n\n  // Extract unique country options\n  const countryOptions = [...new Set(data.map(item => item.Country))].map(country => ({\n    value: country,\n    label: country\n  }));\n\n  // Filter data for selected country\n  const filteredData = data.filter(item => item.Country === selectedCountry).map(item => ({\n    year: Object.keys(item).filter(key => key.match(/^\\d{4}$/)) // Select only year columns\n    .map(year => ({\n      year,\n      \"UE Total\": parseFloat(item[year]) || 0 // Convert string to number\n    }))\n  })).flat(); // Flatten the array\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 bg-white shadow-md rounded-lg\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-semibold mb-4\",\n      children: \"Unemployment Rate (UE Total) by Year\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      options: countryOptions,\n      defaultValue: {\n        value: \"Malaysia\",\n        label: \"Malaysia\"\n      },\n      onChange: option => setSelectedCountry(option.value),\n      className: \"mb-4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 400,\n      children: /*#__PURE__*/_jsxDEV(BarChart, {\n        data: filteredData,\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"year\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"UE Total\",\n          fill: \"#8884d8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(UEChart, \"AsAG0lDX97qf3Lmmw86lmD9w1Os=\");\n_c = UEChart;\nexport default UEChart;\nvar _c;\n$RefreshReg$(_c, \"UEChart\");","map":{"version":3,"names":["React","useState","useEffect","BarChart","Bar","XAxis","YAxis","Tooltip","CartesianGrid","ResponsiveContainer","Select","Papa","jsxDEV","_jsxDEV","UEChart","_s","data","setData","selectedCountry","setSelectedCountry","fetch","then","response","text","csvText","parse","header","skipEmptyLines","complete","result","catch","error","console","countryOptions","Set","map","item","Country","country","value","label","filteredData","filter","year","Object","keys","key","match","parseFloat","flat","className","children","fileName","_jsxFileName","lineNumber","columnNumber","options","defaultValue","onChange","option","width","height","strokeDasharray","dataKey","fill","_c","$RefreshReg$"],"sources":["C:/Users/user/Downloads/Paynet Case Study/frontend/src/components/charts/UnemploymentChart.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer } from \"recharts\";\r\nimport Select from \"react-select\";\r\nimport Papa from \"papaparse\"; // Install with: npm install papaparse\r\n\r\nconst UEChart = () => {\r\n  const [data, setData] = useState([]);\r\n  const [selectedCountry, setSelectedCountry] = useState(\"Malaysia\");\r\n\r\n  useEffect(() => {\r\n    // Fetch the CSV file\r\n    fetch(\"/Cleaned_WDIEXCEL(1).csv\") // Adjust path as needed\r\n      .then((response) => response.text())\r\n      .then((csvText) => {\r\n        // Parse CSV data\r\n        Papa.parse(csvText, {\r\n          header: true,\r\n          skipEmptyLines: true,\r\n          complete: (result) => {\r\n            setData(result.data);\r\n          },\r\n        });\r\n      })\r\n      .catch((error) => console.error(\"Error fetching CSV:\", error));\r\n  }, []);\r\n\r\n  // Extract unique country options\r\n  const countryOptions = [...new Set(data.map((item) => item.Country))].map((country) => ({\r\n    value: country,\r\n    label: country,\r\n  }));\r\n\r\n  // Filter data for selected country\r\n  const filteredData = data\r\n    .filter((item) => item.Country === selectedCountry)\r\n    .map((item) => ({\r\n      year: Object.keys(item)\r\n        .filter((key) => key.match(/^\\d{4}$/)) // Select only year columns\r\n        .map((year) => ({\r\n          year,\r\n          \"UE Total\": parseFloat(item[year]) || 0, // Convert string to number\r\n        })),\r\n    }))\r\n    .flat(); // Flatten the array\r\n\r\n  return (\r\n    <div className=\"p-4 bg-white shadow-md rounded-lg\">\r\n      <h2 className=\"text-xl font-semibold mb-4\">Unemployment Rate (UE Total) by Year</h2>\r\n\r\n      {/* Country Selector */}\r\n      <Select\r\n        options={countryOptions}\r\n        defaultValue={{ value: \"Malaysia\", label: \"Malaysia\" }}\r\n        onChange={(option) => setSelectedCountry(option.value)}\r\n        className=\"mb-4\"\r\n      />\r\n\r\n      {/* Bar Chart */}\r\n      <ResponsiveContainer width=\"100%\" height={400}>\r\n        <BarChart data={filteredData}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"year\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Bar dataKey=\"UE Total\" fill=\"#8884d8\" />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UEChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}